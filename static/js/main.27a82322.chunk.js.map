{"version":3,"sources":["redux/trivia.js","redux/index.js","store.js","logo.svg","components/Home.js","App.js","components/Modal.js","components/Questions.js","components/Routes.js","serviceWorker.js","index.js"],"names":["triviaReducer","trivia","action","type","results","fetchQuestions","category","dispatch","a","categoryId","geography","computers","history","games","tv","animals","music","books","sports","axios","get","data","shuffle","arr","sort","Math","random","forEach","result","shuffledArr","incorrect_answers","correct_answer","shuffledAnswers","console","log","appReducer","combineReducers","middleware","thunkMiddleware","withExtraArgument","process","browser","createLogger","collapsed","createStore","state","undefined","composeWithDevTools","applyMiddleware","module","exports","Home","handleClick","bind","event","this","props","getQuestions","target","value","className","id","to","Button","color","onClick","size","React","Component","withRouter","connect","reduxState","App","ScoreModal","buttonLabel","score","useState","modal","setModal","toggle","Modal","isOpen","ModalHeader","ModalBody","ModalFooter","Questions","componentDidMount","setTimeout","setState","loading","numberCorrect","handleChoice","choice","buttonId","button","document","getElementById","style","backgroundColor","disabled","i","element","markCorrectAnswer","correctAnswer","innerHTML","getAttribute","key","Spinner","width","height","length","map","questionIndex","question","replace","buttonIndex","dangerouslySetInnerHTML","__html","Routes","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.27a82322.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst SET_TRIVIA = 'SET_TRIVIA';\n\nconst setTrivia = (results) => {\n  return {\n    type: SET_TRIVIA,\n    results,\n  };\n};\n\nexport default function triviaReducer(trivia = [], action) {\n  switch (action.type) {\n    case SET_TRIVIA: {\n      return action.results;\n    }\n\n    default:\n      return trivia;\n  }\n}\n\nexport const fetchQuestions = (category) => {\n  return async (dispatch) => {\n    let categoryIdsObject = {\n      geography: 22,\n      computers: 18,\n      history: 23,\n      games: 15,\n      tv: 14,\n      animals: 27,\n      music: 12,\n      books: 10,\n      sports: 21,\n    };\n\n    let categoryId = categoryIdsObject[category];\n\n    try {\n      const { data } = await axios.get(\n        `https://opentdb.com/api.php?amount=10&category=${categoryId}&difficulty=medium&type=multiple`\n      );\n\n      const shuffle = (arr) => arr.sort(() => 0.5 - Math.random());\n      data.results.forEach((result) => {\n        let shuffledArr = shuffle([\n          ...result.incorrect_answers,\n          result.correct_answer,\n        ]);\n\n        result.shuffledAnswers = shuffledArr;\n      });\n\n      dispatch(setTrivia(data));\n    } catch (err) {\n      console.log('Error fetching geography trivia', err);\n    }\n  };\n};\n","import { combineReducers } from 'redux';\nimport triviaReducer from './trivia';\n\nconst appReducer = combineReducers({\n  results: triviaReducer,\n});\n\nexport default appReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport axios from 'axios';\nimport appReducer from './redux';\nimport { createLogger } from 'redux-logger';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunkMiddleware from 'redux-thunk';\n\nlet middleware = [thunkMiddleware.withExtraArgument({ axios })];\nif (process.browser) {\n  middleware = [...middleware, createLogger({ collapsed: true })];\n}\n\nconst RESET_STORE = 'RESET_STORE';\nexport const resetStore = () => ({ type: RESET_STORE });\nconst rootReducer = (state, action) => {\n  if (action.type === RESET_STORE) {\n    state = undefined;\n    return appReducer(state, action);\n  }\n  return appReducer(state, action);\n};\n\nexport default createStore(\n  rootReducer,\n\n  composeWithDevTools(applyMiddleware(...middleware))\n);\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchQuestions } from '../redux/trivia';\nimport { withRouter, NavLink } from 'react-router-dom';\nimport { Button } from 'reactstrap';\n\nexport class Home extends React.Component {\n  constructor() {\n    super();\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(event) {\n    console.log('event', event);\n    // console.log('e', e);\n    this.props.getQuestions(event.target.value);\n  }\n\n  render() {\n    return (\n      <div className=\"trivia\">\n        <div>\n          <h1 className=\"header\">\n            Ready to test your trivia skills? Select a category to begin.\n          </h1>\n          <div id=\"category\">\n            <div>\n              <NavLink to=\"/questions\">\n                <Button\n                  type=\"button\"\n                  color=\"success\"\n                  // style={{ backgroundColor: '#28a745' }}\n                  value=\"geography\"\n                  onClick={this.handleClick}\n                >\n                  Geography\n                </Button>\n              </NavLink>\n              <NavLink to=\"/questions\">\n                <Button\n                  // style={{ backgroundColor: '#dc3545' }}\n                  color=\"danger\"\n                  size=\"large\"\n                  value=\"games\"\n                  onClick={this.handleClick}\n                >\n                  Games\n                </Button>\n              </NavLink>\n              <NavLink to=\"/questions\">\n                <Button\n                  value=\"animals\"\n                  color=\"primary\"\n                  onClick={this.handleClick}\n                >\n                  Animals\n                </Button>\n              </NavLink>\n            </div>\n            <div>\n              <NavLink to=\"/questions\">\n                <Button\n                  value=\"computers\"\n                  // style={{ backgroundColor: '#6c757d' }}\n                  color=\"secondary\"\n                  onClick={this.handleClick}\n                >\n                  Computers\n                </Button>\n              </NavLink>\n              <NavLink to=\"/questions\">\n                <Button\n                  value=\"history\"\n                  // style={{ backgroundColor: '#ffc107' }}\n                  color=\"warning\"\n                  onClick={this.handleClick}\n                >\n                  History\n                </Button>\n              </NavLink>\n              <NavLink to=\"/questions\">\n                <Button\n                  value=\"tv\"\n                  // style={{ backgroundColor: '#17a2b8' }}\n                  color=\"info\"\n                  onClick={this.handleClick}\n                >\n                  TV\n                </Button>\n              </NavLink>\n            </div>\n            <div>\n              <NavLink to=\"/questions\">\n                <Button\n                  value=\"music\"\n                  className=\"music\"\n                  // style={{ backgroundColor: '#6A5ACD' }}\n                  onClick={this.handleClick}\n                >\n                  Music\n                </Button>\n              </NavLink>\n              <NavLink to=\"/questions\">\n                <Button\n                  value=\"books\"\n                  className=\"books\"\n                  // style={{ backgroundColor: '#FF7F50', color: 'black' }}\n                  onClick={this.handleClick}\n                >\n                  Books\n                </Button>\n              </NavLink>\n              <NavLink to=\"/questions\">\n                <Button\n                  value=\"sports\"\n                  className=\"sports\"\n                  // style={{ backgroundColor: '#8B0000' }}\n                  onClick={this.handleClick}\n                >\n                  Sports\n                </Button>\n              </NavLink>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapState = (reduxState) => {\n  return {\n    results: reduxState.results,\n  };\n};\n\nconst mapDispatch = (dispatch) => ({\n  getQuestions: (category) => dispatch(fetchQuestions(category)),\n});\n\nexport default withRouter(connect(mapState, mapDispatch)(Home));\n","import React from 'react';\nimport logo from './logo.svg';\nimport Home from './components/Home.js';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","import React, { useState } from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport { NavLink } from 'react-router-dom';\n\nconst ScoreModal = (props) => {\n  const { buttonLabel, className, score } = props;\n\n  const [modal, setModal] = useState(false);\n\n  const toggle = () => setModal(!modal);\n\n  return (\n    <div>\n      <Button color=\"info\" onClick={toggle}>\n        {buttonLabel}\n      </Button>\n      <Modal isOpen={modal} toggle={toggle} className={className}>\n        <ModalHeader toggle={toggle}>Trivia Score</ModalHeader>\n        <ModalBody>\n          {score < 60\n            ? `Awww shucks, you got a ${score || 0}%. Better luck next time!`\n            : `You've got some mad trivia skills! You got a ${score}%`}\n          .{' '}\n        </ModalBody>\n        <ModalFooter>\n          <NavLink to=\"/\">\n            <Button color=\"primary\" onClick={toggle}>\n              Back to Categories\n            </Button>\n          </NavLink>\n          <Button color=\"secondary\" onClick={toggle}>\n            Cancel\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </div>\n  );\n};\n\nexport default ScoreModal;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter, NavLink } from 'react-router-dom';\nimport { Spinner } from 'reactstrap';\n\nimport ScoreModal from './Modal';\n\nexport class Questions extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      numberCorrect: 0,\n      loading: true,\n    };\n    this.handleChoice = this.handleChoice.bind(this);\n  }\n  componentDidMount = () => {\n    setTimeout(() => {\n      this.setState({\n        loading: false,\n      });\n    }, 500);\n  };\n  handleChoice(choice, result, buttonId) {\n    let button = document.getElementById(buttonId);\n\n    if (button && choice === result.correct_answer) {\n      this.setState({ numberCorrect: this.state.numberCorrect + 1 });\n      button.style.backgroundColor = 'green';\n      button.style.color = 'white';\n      button.disabled = true;\n    } else {\n      button.style.backgroundColor = 'red';\n    }\n    for (let i = 0; i < 4; i++) {\n      let id = buttonId[0] + '-' + i;\n      let element = document.getElementById(id);\n\n      this.markCorrectAnswer(element, result.correct_answer);\n      element.disabled = true;\n    }\n  }\n\n  markCorrectAnswer(element, correctAnswer) {\n    if (\n      element.innerHTML === correctAnswer ||\n      element.getAttribute('choice') === correctAnswer\n    ) {\n      element.style.backgroundColor = 'green';\n    }\n  }\n\n  render() {\n    const results = this.props.results.results;\n\n    return (\n      <div>\n        <div className=\"questions-wrapper trivia\" key={results}>\n          <nav>\n            <NavLink className=\"nav-link\" to=\"/\">\n              X\n            </NavLink>\n          </nav>\n          {this.state.loading ? (\n            <Spinner\n              color=\"dark\"\n              style={{\n                width: '4rem',\n                height: '4rem',\n              }}\n            />\n          ) : results && results.length ? (\n            results.map((result, questionIndex) => (\n              <div className=\"question\" key={result.question}>\n                <h2>\n                  {questionIndex +\n                    1 +\n                    '. ' +\n                    result.question\n                      .replace(/(&quot\\;)/g, '\"')\n                      .replace(/&#039;/g, \"'\")\n                      .replace(/&lt;/g, '<')\n                      .replace(/&gt;/g, '>')}\n                </h2>\n\n                <form id=\"choice-form\">\n                  {result.shuffledAnswers.map((choice, buttonIndex) => (\n                    <div key={choice.incorrect_answers}>\n                      <button\n                        disabled={false}\n                        type=\"button\"\n                        className=\"choice\"\n                        choice={choice}\n                        dangerouslySetInnerHTML={{ __html: choice }}\n                        id={questionIndex + '-' + buttonIndex}\n                        onClick={() => {\n                          this.handleChoice(\n                            choice,\n                            result,\n                            questionIndex + '-' + buttonIndex\n                          );\n                        }}\n                      >\n                        {/* {choice\n                            .replace(/&quot;/g, '\"')\n                            .replace(/&#039;/g, \"'\")\n                            .replace(/&lt;/g, '<')\n                            .replace(/&gt;/g, '>')\n                            .replace(/&lrm;/g, '')\n                            .replace(/&oacute;/g, 'ó')} */}\n                      </button>\n                    </div>\n                  ))}\n                </form>\n              </div>\n            ))\n          ) : (\n            <div>\n              <h2>A category has not been selected yet.</h2>\n            </div>\n          )}\n          {!this.state.loading && results && results.length && (\n            <ScoreModal\n              buttonLabel=\"Check Your Score\"\n              score={this.state.numberCorrect * 10}\n            />\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapState = (reduxState) => {\n  return {\n    results: reduxState.results,\n  };\n};\n\nexport default withRouter(connect(mapState)(Questions));\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport App from '../App';\nimport Home from './Home';\nimport Questions from './Questions';\nimport '../App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nconst Routes = () => {\n  return (\n    <Router>\n      <div>\n        <main>\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route exact path=\"/questions\" component={Questions} />\n          </Switch>\n        </main>\n      </div>\n    </Router>\n  );\n};\n\nexport default Routes;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Home from './components/Home';\nimport Routes from './components/Routes';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Routes />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}